---
title: "Take-Home Exercise 1"
author:
  - name: Matthew Ho
    url: https://www.linkedin.com/in/matthewhoyiwen/
date: 01-19-2024
description: |
  Take-Home Exercise 1
categories:
  - Take-Home Exercise
format:
  html:
    toc: true
execute: 
  eval: true
  echo: true
  warning: false
---

## 1.0 Overview

### 1.1 Objectives

1.  Using appropriate function of sf and tidyverse, preparing the following geospatial data layer in sf tibble data.frames:

-   Grab taxi location points either by origins or destinations.

-   Road layer within Singapore excluding outer islands.

-   Singapore boundary layer excluding outer islands

2.  Using the extracted data, derive traditional Kernel Density Estimation layers.
3.  Using the extracted data, derive either Network Kernel Density Estimation (NKDE) or Temporal Network Kernel Density Estimation (TNKDE) Using appropriate tmap functions, display the kernel density layers on openstreetmap of Singapore.
4.  Describe the spatial patterns revealed by the kernel density maps.

### 1.2 Approach

## 2.0 Setup

### 2.1 Dependencies

```{r}
pacman::p_load(tidyverse, sf, tmap, maptools, spatstat, spNetwork, tmap, classInt, viridis, smoothr, arrow, stringr, purrr, rvest)
```

### 2.2 Datasets

#### Aspatial data

Grab-Posisi Singapore dataset

#### Geospatial data

1.  Road data set from Geofabrik's OpenStreetMap.

-   Although the dataset includes all of Malaysia, Singapore, and Brunei, only Singapore's data will required.

2.  Master Plan 2019 Subzone Boundary (No Sea) from Data.gov.sg.

## 3.0 Data Wrangling

### 3.1 Importing Data

#### Reading the Grab-Posisi Parquet Files

```{r}

grabp <- open_dataset("data/aspatial/GrabPosisi/") %>% as.data.frame()
```

#### Opening the geospatial data

```{r}

mpsz = st_read("data/geospatial/MasterPlan2019SubzoneBoundaryNoSeaKML.kml")
```

```{r}
mpsz$Description[1]
```
https://www.linkedin.com/pulse/r-using-stringr-extract-information-from-html-tags-kml-melvin-kew/
```{r}
mpsz <- mpsz %>% 
  mutate(Match=str_match_all(Description,"<td>(.*?)</td>")) %>% 
  mutate(Match=map(Match, ~ .[,2])) %>% 
  mutate(Match=map(Match,setNames,c("SUBZONE_NO","SUBZONE_N","SUBZONE_C", "CA_IND", "PLN_AREA_N", "PLN_AREA_C", "REGION_N", "REGION_C", "INC_CRC", "FMEL_UPD_D"))) %>% 
  unnest_wider(Match) %>%
  st_as_sf()
```

```{r}
summary(mpsz)
mpsz <- mpsz %>% dplyr::select('Name', 'Description', 'geometry', 'SUBZONE_NO', 'SUBZONE_N', 'PLN_AREA_N', 'PLN_AREA_C', 'REGION_N', 'REGION_C')
summary(mpsz)
```

```{r}

osm = st_read("data/geospatial/osm.shp.zip", layer="gis_osm_roads_free_1")
```

### 3.2 Basic preprocessing

```{r}

head(grabp)
```

```{r}

grabp$pingtimestamp <- as_datetime(grabp$pingtimestamp)
```

```{r}

origin_df <- grabp %>%
  group_by(trj_id) %>%
  arrange(pingtimestamp) %>%
  filter(row_number()==1) %>%
  mutate(weekday = wday(pingtimestamp,
                        label=TRUE,
                        abbr=TRUE),
         start_hr = factor(hour(pingtimestamp)),
         day = factor(mday(pingtimestamp))) %>%
  st_as_sf(coords = c("rawlng", "rawlat"),
                      crs = 4326) %>%
  st_transform(crs = 3414)

destination_df <- grabp %>%
  group_by(trj_id) %>%
  arrange(desc(pingtimestamp)) %>%
  filter(row_number()==1) %>%
  mutate(weekday = wday(pingtimestamp,
                        label=TRUE,
                        abbr=TRUE),
         end_hr = factor(hour(pingtimestamp)),
         day = factor(mday(pingtimestamp))) %>%
  st_as_sf(coords = c("rawlng", "rawlat"),
                      crs = 4326) %>%
  st_transform(crs = 3414)

head(origin_df)
head(destination_df)
```

```{r}

origin_df <- origin_df %>% dplyr::select('trj_id', 'pingtimestamp', 'geometry', 'weekday', 'start_hr', 'day', 'geometry')
destination_df <- destination_df %>% dplyr::select('trj_id', 'pingtimestamp', 'geometry', 'weekday', 'end_hr', 'day', 'geometry')
```

```{r}

write_rds(origin_df, "data/rds/origin.rds")
write_rds(destination_df, "data/rds/destination.rds")
```

```{r}

destination_df <- read_rds("data/rds/destination.rds")
origin_df <- read_rds("data/rds/origin.rds")
```

```{r}
head(osm)
unique(osm$fclass)
```
https://www.geofabrik.de/data/geofabrik-osm-gis-standard-0.3.pdf
```{r}
values_to_keep <- c("primary", "secondary", "residential", "service", "tertiary", "primary_link", "motorway", "motorway_link", "tertiary_link", "living_street", "trunk", "trunk_link")

osm <- osm[osm$fclass %in% values_to_keep, ]
```

```{r}
summary(osm)
unique(osm$fclass)
```

```{r}

length(which(st_is_valid(mpsz) == FALSE))
mpsz[which(st_is_valid(mpsz) == FALSE), ]

mpsz <- st_make_valid(mpsz)
mpsz <- st_zm(mpsz)
```

### 3.3 CRS Adjustments and Verification

```{r}

st_crs(mpsz)
st_crs(osm)
```

```{r}

osm <- st_transform(osm, crs = 3414)
```

```{r}

mpsz <- st_transform(mpsz, crs = 3414)
```

```{r}

st_crs(mpsz)
st_crs(osm)
```

```{r}

osm <- osm %>% dplyr::select('osm_id', 'fclass')
```

```{r}

plot(st_geometry(mpsz))
```

#### Outer Island:

An island in Singapore inaccessible by road

Therefore, Coney Island, Jurong Island and Sentosa are not outer islands.

Pulau Ubin and Pulau Tekong are examples of outer islands.

```{r}

merged_sg <- st_union(mpsz) %>%
    st_cast("POLYGON")

merged_sg <- merged_sg[c(10)]
merged_sg <- fill_holes(merged_sg, units::set_units(1, "km^2"))
merged_sg <- st_as_sf(merged_sg)
par(1,2)
plot(st_geometry(mpsz))
plot(st_geometry(merged_sg))

write_rds(merged_sg, "data/rds/merged_sg.rds")
```

```{r}
merged_sg <- read_rds("data/rds/merged_sg.rds")
```

```{r}

merged_st <- as_Spatial(merged_sg)
merged_sg_sp <- as(merged_st, "SpatialPolygons")
merged_sg_owin <- as(merged_sg_sp, "owin")

write_rds(merged_sg_owin, "data/rds/merged_sg_owin.rds")
```

```{r}
# merged_sg_owin <- read_rds("data/rds/merged_sg_owin.rds")
```

```{r}

osm_sg <- st_intersection(osm, merged_sg)
```

```{r}
osm_sg <- st_cast(st_cast(osm_sg, "MULTILINESTRING"),"LINESTRING")
summary(osm_sg)

write_rds(osm_sg, "data/rds/osm_sg.rds")
```

```{r}
osm_sg <- read_rds("data/rds/osm_sg.rds")
```

```{r}
plot(osm_sg)
```

```{r}
origin <- as_Spatial(origin_df)
destination <- as_Spatial(destination_df)

origin_sp <- as(origin, "SpatialPoints")
destination_sp <- as(destination, "SpatialPoints")

origin_ppp <- as(origin_sp, "ppp")
destination_ppp <- as(destination_sp, "ppp")
```

```{r}
origin_ppp <- origin_ppp[merged_sg_owin]
destination_ppp <- destination_ppp[merged_sg_owin]
```

### 3.4 Simple Visualisations

```{r}
plot(origin_ppp)
plot(destination_ppp)
```

```{r}
any(duplicated(origin_ppp))
any(duplicated(destination_ppp))
```

#### 4.0 KDE

```{r}
sapply(origin_ppp, class)
sapply(origin_ppp, typeof)

class(origin_ppp)
```

```{r}
origin_ppp$x <- as.numeric(origin_ppp$x)
summary(origin_ppp)
```

```{r}
par(1,2)

origin.bw <- density(origin_ppp,
                             sigma=bw.diggle,
                              edge=TRUE,
                            kernel="quartic") 
plot(origin.bw)

origin_ppp.km <- rescale(origin_ppp, 1000, "km")

origin.bw <- density(origin_ppp.km,
                              sigma=bw.diggle,
                              edge=TRUE,
                            kernel="quartic") 
plot(origin.bw)
```

```{r}
par(1,2)

destination.bw <- density(destination_ppp,
                             sigma=bw.diggle,
                              edge=TRUE,
                            kernel="quartic") 
plot(destination.bw)

destination_ppp.km <- rescale(destination_ppp, 1000, "km")

destination.bw <- density(destination_ppp.km,
                              sigma=bw.diggle,
                              edge=TRUE,
                            kernel="quartic") 
plot(destination.bw)
```
```{r}
sort(mpsz$SUBZONE_N)
```
```{r}
sort(unique(mpsz$PLN_AREA_N))
```

```{r}
mpsz_changi = mpsz %>% filter(PLN_AREA_N=="CHANGI")
changi_owin <- as.owin(mpsz_changi, "owin")

plot(mpsz_changi)
plot(changi_owin)
```
```{r}
osm_changi_i <- st_intersection(osm_sg, mpsz_changi)
osm_changi_idxs <- as.numeric(osm_changi_i$osm_id)
osm_changi<- osm_sg[osm_sg$osm_id %in% osm_changi_idxs, ]

plot(osm_changi)
```

```{r}
destination_df.changi = st_intersection(destination_df, mpsz_changi)
plot(destination_df.changi)
```


```{r}
lixels <- lixelize_lines(osm_changi, 1000, mindist = 500)
samples <- lines_center(lixels)
```

```{r}
densities <- nkde(osm_changi, 
                  events=destination_df.changi, 
                  w=rep(1, nrow(destination_df.changi)), 
                  samples=samples, 
                  kernel_name="quartic", 
                  bw=3000, 
                  div="bw", 
                  method="simple", 
                  digits=1,
                  tol=1,
                  grid_shape=c(1,1), 
                  max_depth = 8, 
                  agg=5, 
                  sparse=TRUE, 
                  verbose = FALSE)
```

```{r}
samples$density <- densities
lixels$density <- densities
```

```{r}
samples$density <- samples$density*1000
lixels$density <- lixels$density*1000
```

```{r}
# write_rds(samples,  "data/rds/samples.rds")
# write_rds(lixels,  "data/rds/lixels.rds")
```

```{r}
tm_shape(lixels) + 
  tm_lines(col="density")
# tm_shape(destination_df.changi) + 
#  tm_dots()
```