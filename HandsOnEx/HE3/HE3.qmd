---
title: "1st & 2nd Order Spatial Point Patterns Analysis Methods"
author:
  - name: Matthew Ho
    url: https://www.linkedin.com/in/matthewhoyiwen/
date: 01-18-2024
description: |
  1st & 2nd Order Spatial Point Patterns Analysis Methods.
categories:
  - Hands-On Exercise
  - tidyverse
  - sf
  - tmap
format:
  html:
    toc: true
execute: 
  eval: true
  echo: true
  warning: false
---

## 1.0 Overview

1st & 2nd Order Spatial Point Patterns Analysis Methods

### 1.1 Readings

#### Lesson 3 Slides

Spatial point patterns use points as events.

When dealing with their locations, consider if the points are randomly located or patterned.

If these locations are associated with a value, they may follow a marked point pattern (Point patterns with a mark, which is a categorical or numerical label). They may also be random or patterned.

When considering points on a plane, these points can be imagined to occur on an isotropic (Measurement direction does not affect magnitude) plane. (Perfectly flat and homogeneous 2D space).

In a set of observed points, they generally follow 3 spatial distributions: Random, Aggregate (Clustered) and Regular (Uniform)

$X = \{xâˆˆD\}$ where D is the study region, or a subset of $R^n$, where n is the dimensions of the Euclidean space, probably 2 in most cases.

First-order analysis of spatial point patterns: Observations vary based on location due to variations in [underlying properties]{.underline}

Second order analysis of spatial point patterns: Observations vary based on location due to [interaction effects between observations]{.underline}

2 Kinds of First order spatial point patterns analysis techniques

1.  Density Based
    -   Kernel density estimation (KDE)

        -   $\hat{\lambda}_\tau(s)=\frac{1}{\sigma_\tau(s)} \sum_{i=1}^{n} \frac{1}{\tau^2}k(\frac{s-s_i}{\tau})$

        -   $k(\frac{s-s_i}{\tau})$ Is the kernel, which can have different equations for the function k. The above is the uniform kernel.

        -   $\tau$ is the bandwidth, or radius

        -   The centre is called the "regression point"

        -   Adaptive bandwidth: Adjust bandwidth (radius) based on data density. i.e shorter for dense, longer for sparse. Can use nearest-neighbour for this

        -   Fixed bandwidth: May produce large variances for sparse data and hide subtle local variation for sparse data. May not be able to calibrate in local areas where data is too sparse.

    -   Quadrat analysis

        -   Divide the study area $R$ into equally-sized subregions. Often but not necessarily square.

        -   Count events per subregion

        -   Calculate intensity of events in each region. Intensity is denoted with $\lambda$, $n$ is the number of events. $A$ is the area of each quadrat. $\lambda=\frac{n}{A}$

        -   Perform the Complete Spatial Randomness Test (CSR)

        -   Variance-Mean Ratio (VMR): For uniform, expect close to 0. For random, expect close to 1. For cluster, expect more than 1

        -   CSR/IRP (independent random process): Any event has equal probability of being in any location \[1st order\]. Location of an event is indepent of the location of another \[2nd order\].

        -   Quadrat weaknesses

            -   Sensitive to quadrat size since the number of points will vary.

            -   Measure of dispersion rather than pattern

            -   Single measure for entire distribution, variation with whole region is not recognised.
2.  Distance-based
    1.  Nearest neighbour index
        -   Euclidean distance from a point to nearest neighbour. Expressed as a ratio of observed mean distance to expected mean distance.

        -   $NNI=\frac{\bar{d}}{E(\bar{d})}$

        -   $\bar{d}=\frac{\sum_{i=1}^{n}d_i}{n}$

        -   $E(\bar{d})=0.5\sqrt{\frac{A}{n}}$

        -   If index \< 1, clustering

        -   If index == 1, random

        -   If index \> 1, Dispersion or competition

        -   Consider the test statistic Z: $Z=\frac{\bar{d}-E(\bar{d})}{Std.error}$

        -   Reject the null hypothesis if z-score is large and p-value is smaller than alpha value (0.05)

Density based measures:

-   Global density: The density of points in the whole region

-   Local density: Density of points within a subregion

G Function (CDF of NN-Distance)

-   $G(r)=\frac{|r_{min}(s_i|)<r}{|R|}$

-   n is the number of points in the study area

-   Tells us the way events are spaced in a point pattern

-   Clustered: G increases rapidly over short distance

-   Evenness: G increases slow up to the distance where most events are space before increasing rapidly

-   Evaluate with simulated confidence envelopes

Monte Carlo simulation test of CSR: A significance test

-   Do m independent simulations of n events in the study region
-   For every simulated point pattern, estimate $G(r)$ and use 5th and 95th percentiles of the function to define upper and lower simulation envelopes.
-   If the estimated $G(r)$ falls outside these bounds, it is statistically significant
-   Simply put: Spray n events m times and calculate $G(r)$. Draw bounds based on the 0.05 and 1-0.05 percentiles and compare to assess the chance of the $G(r)$ being a random coincidence

F Function (Check if clustered or even)

-   Select some random point locations within $R$

-   Find min distance from each point to any event in $R$

-   3 Steps

    1.  Randomly select m points where $m=(p_1,p_2,...,p_n)$
    2.  Calculate $d_{min}(p_i,s)$
    3.  Calculate $F(d)$ where $F(d)=\frac{|d_{min}(p_i,s) < d|}{m}$

-   If clustered, F(r) rises slowly at first before rising rapidly at longer distances

-   If evenness, F(r) rises rapidly at first then slowly at longer distances

-   Like G function, calculate the envelopes and check if it falls outside

K Function (Spatial distribution of a set of points)

-   Consider the limit of NN distance. It only uses nearest distance.

-   K function uses more points

-   Estimate of spatial dependence over a wider range

-   Uses every distance between events in $R$

-   Assumed isotropy (identical values of a property in all directions)

-   Calculation

-   Construct circle $c$ of radius $h$ around each point $e_i$

-   Count $|e_j|=|{c \cap e}|$

-   Repeat previous steps for every $e_i \in e$

-   Slowly increment $h$ and repeat calculations

-   $\hat{K}(h)=\frac{R}{n^2}\sum\sum_{i \ne j\frac{I_h(d_{id})}{W_{}ij}}$

-   $R$ is the area of study area. $n$ is number of points. $I_h(d_{id})$ is a dummy variable, 1 if $d_{id}\le h$ else 0. $W_{ij}$ is edge correction, the proportionate of the circumference of the circle centered on i containing point j. =1 if the whole circle is within the study area.

-   The K function can be used as a CSR test. Plot $K(h)$ against different $h$ values.

-   If CSR, $K(h)=\pi h^2$

-   $K(h)$ under low if regular

-   $K(h)$ over hi clustered

-   Consider envelope for significance, else CSR.

L Function (Alternative to K function. Stabilises variance.)

-   Normally normalised to get benchmark of 0. $L(r)=\sqrt{\frac{K(r)}{\pi}}$

-   If $L_{obs}$ above $L_{hi}$ and $L_{theo}$, clustering is statistically significant

-   If $L_{hi} > L_{obs} > L_{lo}$, spatial clustering/dispersion not statistically significant

-   If $L_{lo} > L_{obs}$, spatial dispersion for that distance is statistically significant

-   $L(r) = \sqrt{\frac{K(r)}{\pi}}-r$

#### [Chapter 4: Spatial distribution of points](https://www.insee.fr/en/statistiques/fichier/3635545/imet131-h-chapitre-4.pdf)

Consider the distribution of the points in space and consider if there may be interactions between them.

The former is an easier descriptive analysis.

CSR is useful when there is no obvious regular or clustered pattern.

F function is the distance from a point to the nearest event. AKA empty space function because it measure the aveage space left between events.

G function is the distance to the nearest event; distribution of the distances from an event to its nearest other.

Homogeneous Poisson Process represents a point process where all events are independently and uniformly distributed in its region. Considered stationary and isotropic.

Stationary: Intensity is constant and second-order intensity only depends on direction and distance of 2 points.

Isotropic: Second order intensity is invariant to rotation.

1.  The number of events within the area is Poisson distributed with mean $\lambda|A|$ where $lambda$ is the constant intensity of the point process
2.  The $n$ observed events in the region are uniformly distributed

Inhomogenous Poisson Process: Non-constant intensity. Described with $lambda(x)$ that varies spatially.

#### [Chapter 7 Spatial Point Pattern Analysis](https://link-springer-com.libproxy.smu.edu.sg/chapter/10.1007/978-1-4614-7618-4_7)

Caution: Aggregated (Clustered) or dispersed structures can also be obtained with an IPP, where the intensity of the process varies in space.

Ripley's K function: A cumulative function that gives the average number of points at a distance less than or equal to a radius. Standardised by the process intensity $\frac{n}{|W|}$, assumed homogeneous.

Compare $\hat{K}(r)$ and $K_{}pois(r)$ - Random: = - Aggregate: \> - Regular: \<

L Function

Only distance-based methods can be used to detect exactly at what distance attraction or dispersion are observable without scale bias in a zone.

D Function $D(r)=K_{cas}(r)-K_{controls}(r)$ Compare two subpopulation's distributions

## 2.0 Setup

### 2.1 Requirements

-   **sf**: Simple features access for R. Includes importing, managing and processing data.
-   **spatstat**: For point to point analysis, 1st and 2nd order spatial point patterns analysis and KDE.
-   **raster**: Handles gridding spatial data
-   **maptools**: Convert spatial objects into spatstat's ppp format
-   **tmap**: Thematic map library

### 2.2 Data

-   CHILDCARE from data.gov.sg

-   MP14_SUBZONE_WEB_PL from data.gov.sg

-   CostalOutline from SLA

### 2.3 Importing Data and Packages

```{r}
pacman::p_load(maptools, sf, raster, spatstat, tmap)
```

------------------------------------------------------------------------

Import the data and correct the CRS of the data to 3414

```{r}
childcare_sf <- st_read("data/geospatial/ChildCareServices.geojson") %>%
  st_transform(crs=3414)

mpsz_sf <- st_read(dsn = "data/geospatial", 
                layer = "MP14_SUBZONE_WEB_PL") %>% 
  st_transform(crs=3414)

sg_sf <- st_union(mpsz_sf)
```

### 2.4 Wrangling Data

#### Checking CRS

Confirm the data's CRS is correct
```{r}
st_crs(childcare_sf)
st_crs(sg_sf)
st_crs(mpsz_sf)
```

#### Initial plots
Plot all 3 datasets to observe obvious spatial patterns. 
```{r}
tm_shape(sg_sf) + 
  tm_polygons() + 
  tm_shape(mpsz_sf) + 
  tm_polygons()+ 
  tm_shape(childcare_sf)+ 
  tm_dots()
```

This code prepares an interactive pin map.
```{r}
# tmap_mode('view')
# tm_shape(childcare_sf)+
#   tm_dots()
# tmap_mode('plot')
```

#### Convert to sp's Spatial* class

Use sf's as_Spatial method to convert them

```{r}
childcare <- as_Spatial(childcare_sf)
mpsz <- as_Spatial(mpsz_sf)
sg <- as_Spatial(sg_sf)
```

Checking the conversion
```{r}
childcare
mpsz
sg
```

#### Convert Spatial* into generic sp format
We cannot convert directly to ppp, so we convert to generic spatial first

```{r}
childcare_sp <- as(childcare, "SpatialPoints")
sg_sp <- as(sg, "SpatialPolygons")
childcare
mpsz
sg
```

#### Convert generic sp to spatstat's ppp format
```{r}
childcare_ppp <- as(childcare_sp, "ppp")
childcare_ppp
plot(childcare_ppp)
```

While plotting the new ppp object, we get a warning that it contains duplicated points
```{r}
plot(childcare_ppp)
```

We confirm with with any(duplicated())
```{r}
any(duplicated(childcare_ppp))
```

multiplicity() shows us which points are duplicated
```{r}
multiplicity(childcare_ppp)
```

sum() the number of duplicated points
```{r}
sum(multiplicity(childcare_ppp) > 1)
```

In the interactive map, darker spots have duplicated data
```{r}
# tmap_mode('view')
# tm_shape(childcare) +
#   tm_dots(alpha=0.4, 
#          size=0.05)

# tmap_mode('plot')
```

#### Jittering

Jittering: Slightly shift duplicate points such that they no longer occur at the same point to make them unique. After that, confirm that there are no longer any duplicates with any(duplicated())
```{r}
childcare_ppp_jit <- rjitter(childcare_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)

any(duplicated(childcare_ppp_jit))
```

#### owin
owin: A geographical boundary to confine our analysis. 
```{r}
sg_owin <- as(sg_sp, "owin")
plot(sg_owin)
summary(sg_owin)
```

#### Extracting events to our boundary (owin)

Looks a bit like python, will be very useful in the future. Couples the polygon with the events within it into one entity.
```{r}
childcareSG_ppp = childcare_ppp[sg_owin]
summary(childcareSG_ppp)
```

#### Ploting events within the boundary
Plot the new ppp object
```{r}
plot(childcareSG_ppp)
```

## 3.0 First-order Spatial Point Patterns Analysis

### 3.1 Kernel Density Estimation (KDE)

#### Automatic bandwidth selection
In this case, the method is diggle. The smothing kernel is gaussian and we enable edge bias correction.
```{r}
kde_childcareSG.bw <- density(childcareSG_ppp,
                              sigma=bw.diggle,
                              edge=TRUE,
                            kernel="gaussian") 
plot(kde_childcareSG.bw)
```

In the previous plot, the density values of the output range are unacceptably low and difficult to interpret. 

#### Check the selected bandwidth
```{r}
bw <- bw.diggle(childcareSG_ppp)
bw
```

#### Rescaling KDE values
Rescale with a conversion factor of 1000, calling it 'KM'. The name is optional.
```{r}
childcareSG_ppp.km <- rescale(childcareSG_ppp, 1000, "km")
kde_childcareSG.bw <- density(childcareSG_ppp.km,
                              sigma=bw.diggle,
                              edge=TRUE,
                            kernel="gaussian") 
plot(kde_childcareSG.bw)
```

We fixed the density values of the output!

### 3.2 Different bandwidth selection methods

#### Four Spatstat bandwidth calculation functions
```{r}
bw.CvL(childcareSG_ppp.km)
bw.scott(childcareSG_ppp.km)
bw.ppl(childcareSG_ppp.km)
bw.diggle(childcareSG_ppp.km)
```


#### Comparing diggle and ppl
par(mfrow=c(1,2)) Will be useful in the future for comparing multiple representations
```{r}
kde_childcareSG.ppl <- density(childcareSG_ppp.km, 
                               sigma=bw.ppl, 
                               edge=TRUE,
                               kernel="gaussian")
par(mfrow=c(1,2))
plot(kde_childcareSG.bw, main = "bw.diggle")
plot(kde_childcareSG.ppl, main = "bw.ppl")
```

### 3.3 Applying different bandwidth selection methods
In each method, the differences are quite subtle. Should experiment with more than 1 method when trying to plot KDE.
```{r}
par(mfrow=c(2,2))
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="Gaussian")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="epanechnikov"), 
     main="Epanechnikov")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="quartic"), 
     main="Quartic")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="disc"), 
     main="Disc")
```

## 4.0 Fixed and Adaptive KDE
### 4.1 Fixed Bandwidth

In this example, sigma is set to 0.6. With respect to the unit, kilometers, this represents 600m or 0.6 KM.
```{r}
kde_childcareSG_600 <- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG_600)
```

### 4.2 Adaptive bandwidth
Fixed bandwidth is sensitive to highly skewed distributions of spatial points. Using Adaptive bandwidth solves this issue.
```{r}
kde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, method="kernel")
plot(kde_childcareSG_adaptive)
```

#### Comparing fixed and adaptive bandwidth
```{r}
par(mfrow=c(1,2))
plot(kde_childcareSG.bw, main = "Fixed bandwidth")
plot(kde_childcareSG_adaptive, main = "Adaptive bandwidth")
```

### 4.3 KDE output to grid object
```{r}
gridded_kde_childcareSG_bw <- as.SpatialGridDataFrame.im(kde_childcareSG.bw)
spplot(gridded_kde_childcareSG_bw)
```

#### Conversion to raster
The gridded KDE object can be converted into a raster layer. Remember to set the CRS.

```{r}
kde_childcareSG_bw_raster <- raster(gridded_kde_childcareSG_bw)
kde_childcareSG_bw_raster
```

```{r}
projection(kde_childcareSG_bw_raster) <- CRS("+init=EPSG:3414")
kde_childcareSG_bw_raster
```


### 4.4 tmap visualisation
Raster values are coded onto raster pixels in the v field.
```{r}
tm_shape(kde_childcareSG_bw_raster) + 
  tm_raster("v") +
  tm_layout(legend.position = c("right", "bottom"), frame = FALSE)
```

### 4.5 Comparing spatial point patterns with KDE

#### Extracting study areas

Important process: Remember this syntax to extract study areas.

```{r}
pg = mpsz[mpsz@data$PLN_AREA_N == "PUNGGOL",]
tm = mpsz[mpsz@data$PLN_AREA_N == "TAMPINES",]
ck = mpsz[mpsz@data$PLN_AREA_N == "CHOA CHU KANG",]
jw = mpsz[mpsz@data$PLN_AREA_N == "JURONG WEST",]
```


Plot the areas to confirm
```{r}
par(mfrow=c(2,2))
plot(pg, main = "Punggol")
plot(tm, main = "Tampines")
plot(ck, main = "Choa Chu Kang")
plot(jw, main = "Jurong West")
```

Convert the areas into generic sp
```{r}
pg_sp = as(pg, "SpatialPolygons")
tm_sp = as(tm, "SpatialPolygons")
ck_sp = as(ck, "SpatialPolygons")
jw_sp = as(jw, "SpatialPolygons")
```

Then into owin
```{r}
pg_owin = as(pg_sp, "owin")
tm_owin = as(tm_sp, "owin")
ck_owin = as(ck_sp, "owin")
jw_owin = as(jw_sp, "owin")
```

Use the same python-like syntax to extract only events within the respective areas
```{r}
childcare_pg_ppp = childcare_ppp_jit[pg_owin]
childcare_tm_ppp = childcare_ppp_jit[tm_owin]
childcare_ck_ppp = childcare_ppp_jit[ck_owin]
childcare_jw_ppp = childcare_ppp_jit[jw_owin]
```


Rescale like we did before to transform the unit from meter to kilometer
```{r}
childcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, "km")
```

#### Plot multiple study areas

```{r}
par(mfrow=c(2,2))
plot(childcare_pg_ppp.km, main="Punggol")
plot(childcare_tm_ppp.km, main="Tampines")
plot(childcare_ck_ppp.km, main="Choa Chu Kang")
plot(childcare_jw_ppp.km, main="Jurong West")
```

#### Compute KDE for each study region (Automatic bandwidth).

In this example, we use diggle, edge bias correction and a gaussian smoothing kernel.
```{r}
par(mfrow=c(2,2))
plot(density(childcare_pg_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tampines")
plot(density(childcare_ck_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Choa Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Jurong West")
```


#### Compute KDE for each study region (Fixed bandwidth).

Bandwidth set to 250m
```{r}
par(mfrow=c(2,2))
plot(density(childcare_ck_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Chou Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="JUrong West")
plot(density(childcare_pg_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tampines")
```


### 4.6 Nearest Neighbour Analysis
The Clark-Evans test of aggregation.

H0: Random distribution

H1: Not randomly distributed
```{r}
clarkevans.test(childcareSG_ppp,
                correction="none",
                clipregion="sg_owin",
                alternative=c("clustered"),
                nsim=99)
```
From the above result, the R value indicates clustering. the p-value shows that this is a statistically significant result

#### Clark Evans test on CCK
```{r}
clarkevans.test(childcare_ck_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```
The p value indicates that we cannot reject the null hypothesis

#### Clark Evans test on Tampines
```{r}
clarkevans.test(childcare_tm_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```
The R value indicates clustering and the P value indicates that this is a statistically significant result. 

## 5.0 2nd Order Spatial Point Patterns Analysis Methods

### 5.1 Analysing Spatial Point Process with the G-Function
#### CCK Planning Area Complete Spatial Randomness (CSR) Test
```{r}
G_CK = Gest(childcare_ck_ppp, correction = "border")
plot(G_CK, xlim=c(0,500))

G_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)
plot(G_CK.csr)
```

#### CCK Planning Area Complete Spatial Randomness (CSR) Test
Note the change in correction method
```{r}
G_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = "all", nsim = 999)
plot(G_tm.csr)
```


### 5.2 Analysing Spatial Point Process with the F-Function

The empty space function. Compute the F-Function then perform the complete spatial randomness test.

#### CCK F-Function

```{r}
F_CK = Fest(childcare_ck_ppp)
plot(F_CK)
F_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)
plot(F_CK.csr)
```

#### Tampines F-Function & Monte Carlo Test
```{r}
F_tm = Fest(childcare_tm_ppp, correction = "best")
plot(F_tm)
F_tm.csr <- envelope(childcare_tm_ppp, Fest, correction = "all", nsim = 999)
plot(F_tm.csr)
```

### 5.3 Analysing Spatial Point Process Using K-Function
#### CCK K-Function
```{r}
K_ck = Kest(childcare_ck_ppp, correction = "Ripley")
plot(K_ck, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)")
K_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
plot(K_ck.csr, . - r ~ r, xlab="d", ylab="K(d)-r")
```

#### Tampines K-Function
```{r}
K_tm = Kest(childcare_tm_ppp, correction = "Ripley")
plot(K_tm, . -r ~ r, 
     ylab= "K(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
K_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
plot(K_tm.csr, . - r ~ r, 
     xlab="d", ylab="K(d)-r", xlim=c(0,500))
```

### 5.4 Analysing Spatial Point Process Using L-Function
#### CCK L Function
```{r}
L_ck = Lest(childcare_ck_ppp, correction = "Ripley")
plot(L_ck, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)")
L_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
plot(L_ck.csr, . - r ~ r, xlab="d", ylab="L(d)-r")
```

#### Tampines L Function
```{r}
L_tm = Lest(childcare_tm_ppp, correction = "Ripley")
plot(L_tm, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
L_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
plot(L_tm.csr, . - r ~ r, 
     xlab="d", ylab="L(d)-r", xlim=c(0,500))

```





